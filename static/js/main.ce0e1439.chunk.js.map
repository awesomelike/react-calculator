{"version":3,"sources":["actions/input.js","util/operation.js","components/OperationButton.jsx","context/inputContext.js","context/bufferContext.js","util/bracket.js","serviceWorker.js","components/NumberButton.jsx","reducers/inputReducer.js","components/Buffer.jsx","components/App.jsx","index.js"],"names":["appendSymbol","symbol","type","eraseOne","setInput","string","clearInput","isOperation","includes","OperationButton","operation","useContext","InputContext","input","dispatchInput","setOperationClicked","equalClicked","setEqualClicked","BufferContext","setBuffer","handleClick","lastChar","slice","isPaired","isValid","parseInt","substring","length","inputLength","validInput","fillBracketsCount","countOpenBrackets","countClosedBrackets","i","expression","replace","eval","onClick","value","className","defaultProps","React","createContext","openBrackets","match","closedBrackets","Boolean","window","location","hostname","NumberButton","number","inputReducer","state","action","trim","stateLength","Buffer","buffer","from","opacity","marginTop","to","config","duration","props","style","key","App","useReducer","useState","operationClicked","Provider","id","src","alt","href","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ce0e1439.chunk.js","sourcesContent":["export const appendSymbol = (symbol) => ({\r\n  type: 'APPEND_SYMBOL',\r\n  symbol,\r\n});\r\n\r\nexport const eraseOne = () => ({\r\n  type: 'ERASE_ONE',\r\n});\r\n\r\nexport const setInput = (string) => ({\r\n  type: 'SET_INPUT',\r\n  string,\r\n});\r\n\r\nexport const clearInput = () => ({\r\n  type: 'CLEAR_INPUT',\r\n});\r\n","const isOperation = (symbol) => ['+', '-', '×', '/'].includes(symbol);\r\n\r\nexport { isOperation as default };\r\n","import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport InputContext from '../context/inputContext';\r\nimport BufferContext from '../context/bufferContext';\r\nimport { appendSymbol, setInput, eraseOne } from '../actions/input';\r\nimport isOperation from '../util/operation';\r\nimport isValid, { countOpenBrackets, countClosedBrackets } from '../util/bracket';\r\n\r\nconst OperationButton = ({ operation }) => {\r\n  const {\r\n    input, dispatchInput, setOperationClicked, equalClicked, setEqualClicked,\r\n  } = useContext(InputContext);\r\n  const { setBuffer } = useContext(BufferContext);\r\n\r\n  const handleClick = () => {\r\n    if (equalClicked) {\r\n      setEqualClicked(false);\r\n      setBuffer('');\r\n    }\r\n    const lastChar = `${input}`.slice(-1);\r\n    if (operation === '⌫') {\r\n      dispatchInput(eraseOne());\r\n    } else if (operation === '( )') {\r\n      const isPaired = isValid(input);\r\n      if (input === '0') dispatchInput(setInput('('));\r\n      else if (lastChar === '(') dispatchInput(appendSymbol('('));\r\n      else if (isPaired && (isOperation(lastChar) || lastChar === '(')) {\r\n        dispatchInput(appendSymbol('('));\r\n      } else if (isPaired && (!isOperation(lastChar) || lastChar === ')')) {\r\n        dispatchInput(appendSymbol('×('));\r\n      } else if (!isPaired) dispatchInput(appendSymbol(')'));\r\n    } else if (operation === '+/-') {\r\n      if (input === '0') dispatchInput(setInput('(-'));\r\n      else if (parseInt(input, 10) < 0) dispatchInput(setInput(`${-1 * parseInt(input, 10)}`));\r\n      else if (input === '(-') dispatchInput(setInput('0'));\r\n      else if (isOperation(lastChar) || lastChar === '(') dispatchInput(appendSymbol('(-'));\r\n      else dispatchInput(setInput(`(-${input}`));\r\n    } else {\r\n      if (operation !== '=') {\r\n        if (isOperation(lastChar) && lastChar !== operation) {\r\n          dispatchInput(setInput(input.substring(0, input.length - 1) + operation));\r\n        } else if (!isOperation(lastChar)) {\r\n          dispatchInput(appendSymbol(operation));\r\n        }\r\n      } else {\r\n        const inputLength = input.length;\r\n        let validInput;\r\n        if (isOperation(input[inputLength - 1])) {\r\n          validInput = input.substring(0, inputLength - 1);\r\n        } else validInput = input;\r\n        if (!isValid(input)) {\r\n          const fillBracketsCount = countOpenBrackets(input) - countClosedBrackets(input);\r\n          for (let i = 0; i < fillBracketsCount; i += 1) validInput += ')';\r\n        }\r\n        setBuffer(`${validInput}=`);\r\n\r\n        const expression = `${validInput}`.replace(/[×]/g, '*');\r\n\r\n        // eslint-disable-next-line no-eval\r\n        dispatchInput(setInput(eval(expression)));\r\n        setEqualClicked(true);\r\n      }\r\n      setOperationClicked(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <td>\r\n      <input\r\n        type=\"button\"\r\n        onClick={handleClick}\r\n        value={operation}\r\n        className={operation !== '+/-' ? 'num-button operation' : 'num-button'}\r\n      />\r\n    </td>\r\n  );\r\n};\r\n\r\nOperationButton.defaultProps = {\r\n  operation: '+',\r\n};\r\n\r\nOperationButton.propTypes = {\r\n  operation: PropTypes.string,\r\n};\r\n\r\nexport { OperationButton as default };\r\n","import React from 'react';\r\n\r\nconst InputContext = React.createContext();\r\n\r\nexport { InputContext as default };","import React from 'react';\r\n\r\nconst BufferContext = React.createContext();\r\n\r\nexport { BufferContext as default };","const isValid = (input) => {\r\n  const openBrackets = `${input}`.match(/[(]/g);\r\n  const closedBrackets = `${input}`.match(/[)]/g);\r\n  if (!openBrackets) return true;\r\n  if (!!openBrackets && !!closedBrackets) return openBrackets.length === closedBrackets.length;\r\n  return false;\r\n};\r\n\r\nconst countOpenBrackets = (input) => `${input}`.match(/[(]/g).length;\r\nconst countClosedBrackets = (input) => {\r\n  const match = `${input}`.match(/[)]/g);\r\n  return (match !== null ? match.length : 0);\r\n};\r\nexport { isValid as default, countOpenBrackets, countClosedBrackets };\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport InputContext from '../context/inputContext';\r\nimport BufferContext from '../context/bufferContext';\r\nimport { appendSymbol, clearInput } from '../actions/input';\r\n\r\nconst NumberButton = ({ number }) => {\r\n  const { dispatchInput, equalClicked, setEqualClicked } = useContext(InputContext);\r\n  const { setBuffer } = useContext(BufferContext);\r\n  const handleClick = () => {\r\n    if (equalClicked) {\r\n      dispatchInput(clearInput());\r\n      setBuffer('');\r\n      dispatchInput(appendSymbol(`${number}`));\r\n      setEqualClicked(false);\r\n    } else {\r\n      dispatchInput(appendSymbol(`${number}`));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <td>\r\n      <input\r\n        type=\"button\"\r\n        onClick={handleClick}\r\n        value={number}\r\n        className=\"num-button\"\r\n      />\r\n    </td>\r\n  );\r\n};\r\n\r\nNumberButton.propTypes = {\r\n  number: PropTypes.number,\r\n};\r\n\r\nNumberButton.defaultProps = {\r\n  number: 0,\r\n};\r\n\r\nexport { NumberButton as default };\r\n","import isOperation from '../util/operation';\r\n\r\n// eslint-disable-next-line consistent-return\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'APPEND_SYMBOL': {\r\n      const { symbol } = action;\r\n      if (state === '0') {\r\n        if (isOperation(symbol)) {\r\n          return ` ${state + action.symbol}`.trim();\r\n        }\r\n        return `${action.symbol}`;\r\n      } return ` ${state + action.symbol}`.trim();\r\n    }\r\n    case 'ERASE_ONE': {\r\n      const stateLength = `${state}`.length;\r\n      return `${state}` === '0' || stateLength === 1 ? '0' : `${state}`.substring(0, stateLength - 1);\r\n    }\r\n    case 'SET_INPUT':\r\n      return action.string;\r\n    case 'CLEAR_INPUT':\r\n      return '0';\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nexport { inputReducer as default };\r\n","import React from 'react';\r\nimport { Spring } from 'react-spring';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Buffer = ({ buffer }) => (\r\n  <td>\r\n    <Spring\r\n      from={{ opacity: 0, marginTop: -50 }}\r\n      to={{ opacity: 1, marginTop: -20 }}\r\n      config={{ duration: 250 }}\r\n    >\r\n      {(props) => (\r\n        <p className=\"buffer\" style={props} key={buffer}>\r\n          {buffer}\r\n        </p>\r\n      )}\r\n    </Spring>\r\n  </td>\r\n);\r\n\r\nBuffer.defaultProps = {\r\n  buffer: '',\r\n};\r\n\r\nBuffer.propTypes = {\r\n  buffer: PropTypes.string,\r\n};\r\nexport { Buffer as default };\r\n","import React, { useReducer, useState } from 'react';\r\nimport NumberButton from './NumberButton';\r\nimport OperationButton from './OperationButton';\r\nimport InputContext from '../context/inputContext';\r\nimport BufferContext from '../context/bufferContext';\r\nimport { clearInput } from '../actions/input';\r\nimport inputReducer from '../reducers/inputReducer';\r\nimport Buffer from './Buffer';\r\n\r\nconst App = () => {\r\n  const [input, dispatchInput] = useReducer(inputReducer, '0');\r\n  const [buffer, setBuffer] = useState('');\r\n  const [operationClicked, setOperationClicked] = useState(false);\r\n  const [equalClicked, setEqualClicked] = useState(false);\r\n\r\n  // useEffect(() => {\r\n  //   document.addEventListener('keydown', (e) => {\r\n  //     console.log(e);\r\n  //   });\r\n  // }, []);\r\n\r\n  return (\r\n    <InputContext.Provider value={{\r\n      input,\r\n      dispatchInput,\r\n      operationClicked,\r\n      setOperationClicked,\r\n      equalClicked,\r\n      setEqualClicked,\r\n    }}\r\n    >\r\n      <BufferContext.Provider value={{ buffer, setBuffer }}>\r\n        <div className=\"layout\">\r\n          <div className=\"layout__rectange\">\r\n            <table className=\"table\">\r\n              <tr>\r\n                {buffer && <Buffer buffer={buffer} />}\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <div className=\"input\">\r\n                    <span>{input}</span>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <table className=\"button-table\">\r\n                  <tr>\r\n                    <td>\r\n                      <input\r\n                        type=\"button\"\r\n                        value=\"C\"\r\n                        className=\"num-button\"\r\n                        id=\"c-key\"\r\n                        onClick={() => {\r\n                          dispatchInput(clearInput());\r\n                          setBuffer('');\r\n                        }}\r\n                      />\r\n                    </td>\r\n                    <OperationButton operation=\"/\" />\r\n                    <OperationButton operation=\"×\" />\r\n                    <OperationButton operation=\"⌫\" />\r\n                  </tr>\r\n                  <tr>\r\n                    <NumberButton number={7} />\r\n                    <NumberButton number={8} />\r\n                    <NumberButton number={9} />\r\n                    <OperationButton operation=\"-\" />\r\n                  </tr>\r\n                  <tr>\r\n                    <NumberButton number={4} />\r\n                    <NumberButton number={5} />\r\n                    <NumberButton number={6} />\r\n                    <OperationButton operation=\"+\" />\r\n                  </tr>\r\n                  <tr>\r\n                    <NumberButton number={1} />\r\n                    <NumberButton number={2} />\r\n                    <NumberButton number={3} />\r\n                    <OperationButton operation=\"( )\" />\r\n                  </tr>\r\n                  <tr>\r\n                    <OperationButton operation=\"+/-\" />\r\n                    <NumberButton number={0} />\r\n                    <NumberButton number=\".\" />\r\n                    <OperationButton operation=\"=\" />\r\n                  </tr>\r\n                </table>\r\n              </tr>\r\n              <img\r\n                src=\"logo192.png\"\r\n                alt=\"React logo\"\r\n                className=\"layout__logo\"\r\n              />\r\n            </table>\r\n          </div>\r\n          <div className=\"github-container\">\r\n            <img src=\"github.png\" className=\"github-container__logo\" alt=\"Github logo\" />\r\n            <a href=\"https://github.com/awesomelike\" className=\"github-container__link\">@awesomelike</a>\r\n          </div>\r\n        </div>\r\n      </BufferContext.Provider>\r\n    </InputContext.Provider>\r\n  );\r\n};\r\n\r\nexport { App as default };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/main.scss';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}